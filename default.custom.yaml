customization:
  distribution_code_name: Weasel
  distribution_version: 0.9.30
  generator: "Rime::SwitcherSettings"
  modified_time: "Thu Sep 22 14:55:59 2016"
  rime_version: 1.1.2
patch:
  schema_list:
    - schema: luna_pinyin_fluency
    - schema: luna_pinyin_simp
    - schema: luna_pinyin
    - schema: cangjie5
    - schema: wubi86
    - schema: double_pinyin_flypy
    - schema: kaomoji
  menu:
      page_size: 5
  switcher:
    abbreviate_options: true
    caption: "〔切换〕"          #把默认的“方案選單”修改为了“切换”。
    fold_options: true
    hotkeys:
      - "Control+grave"       #默认方案
    option_list_separator: "／"   #以下都为默认custom.yaml文件的默认配置，copy过来就可以。
    save_options:
      - full_shape
      - ascii_punct
      - simplification
      - extended_charset
# 中西文切換鍵的默認設置寫在 default.yaml 裏面
# 以下的 default.custom.yaml 在全局範圍重定義該組快速鍵
#
# 可用的按鍵有 Caps_Lock, Shift_L, Shift_R, Control_L, control_R
# Mac 系統上的鼠鬚管不能區分左、右，因此只有對 Shift_L, Control_L 的設定起作用
#
# 已輸入編碼時按切換鍵，可以進一步設定輸入法中西文切換的形式。
# 可選的臨時切換策略有三：
# inline_ascii 在輸入法的臨時西文編輯區內輸入字母、數字、符號、空格等，回車上屏後自動復位到中文
# commit_text 已輸入的候選文字上屏並切換至西文輸入模式
# commit_code 已輸入的編碼字符上屏並切換至西文輸入模式
# 設爲 noop，屏蔽該切換鍵
#
# 如果要把 Caps Lock 設爲只改變字母的大小寫而不做中西文切換，可將 Caps_Lock 對應的切換方式設爲 noop
# 如果要以 Caps Lock 切換到西文模式，默認輸出小寫字母，請置 ascii_composer/good_old_caps_lock: false
# 如果要以 Caps Lock 切換到西文模式，默認輸出大寫字母，請使用以下設置：
  ascii_composer/good_old_caps_lock: true
  ascii_composer/switch_key:
    Caps_Lock: commit_code
    Shift_L: commit_code
    Shift_R: commit_code

  'punctuator/import_preset': alternative
  'key_binder/import_preset': alternative

  translator/dictionary: pinyin_simp  # (※4) 并继续使用 pinyin_simp 字典

  key_binder:
    bindings:
      - {accept: "Control+p", send: Up, when: composing}
      - {accept: "Control+n", send: Down, when: composing}
      - {accept: "Control+b", send: Left, when: composing}
      - {accept: "Control+f", send: Right, when: composing}
      - {accept: "Control+a", send: Home, when: composing}
      - {accept: "Control+e", send: End, when: composing}
      - {accept: "Control+d", send: Delete, when: composing}
      - {accept: "Control+k", send: "Shift+Delete", when: composing}
      - {accept: "Control+h", send: BackSpace, when: composing}
      - {accept: "Control+g", send: Escape, when: composing}
      - {accept: "Control+bracketleft", send: Escape, when: composing}
      - {accept: "Alt+v", send: Page_Up, when: composing}
      - {accept: "Control+v", send: Page_Down, when: composing}
      - {accept: ISO_Left_Tab, send: "Shift+Left", when: composing}
      - {accept: "Shift+Tab", send: "Shift+Left", when: composing}
      - {accept: Tab, send: "Shift+Right", when: composing}
      - {accept: minus, send: Page_Up, when: has_menu}
      - {accept: equal, send: Page_Down, when: has_menu}
      - {accept: comma, send: Page_Up, when: paging}
      - {accept: period, send: Page_Down, when: has_menu}
      # - {accept: "Control+Shift+1", select: .next, when: always}
      # - {accept: "Control+Shift+2", toggle: ascii_mode, when: always}
      # - {accept: "Control+Shift+3", toggle: full_shape, when: always}
      # - {accept: "Control+Shift+4", toggle: simplification, when: always}
      # - {accept: "Control+Shift+5", toggle: extended_charset, when: always}
      # - {accept: "Control+Shift+exclam", select: .next, when: always}
      # - {accept: "Control+Shift+at", toggle: ascii_mode, when: always}
      # - {accept: "Control+Shift+numbersign", toggle: full_shape, when: always}
      - {accept: "Control+Shift+dollar", toggle: simplification, when: always}
      - {accept: "Control+Shift+percent", toggle: extended_charset, when: always}
      - {accept: "Shift+space", toggle: ascii_punct, when: always}
      # - {accept: "Shift+space", toggle: full_shape, when: always}
      # - {accept: "Control+period", toggle: ascii_punct, when: always}
